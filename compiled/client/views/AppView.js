// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.AppView = (function(_super) {
    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.template = _.template('<button class="hit-button">Hit</button> <button class="stand-button">Stand</button> <button class="reset" style="display: none">Try again?</button> <div class="player-hand-container"></div> <div class="dealer-hand-container"></div>');

    AppView.prototype.events = {
      "click .hit-button": function() {
        var dealer, player;
        this.model.get('playerHand').hit();
        player = this.model.get('playerHand');
        dealer = this.model.get('dealerHand');
        if (player.scores()[0] > 21) {
          this.lose();
          $('button.hit-button').prop("disabled", true);
          $('button.stand-button').prop("disabled", true);
        }
        if (player.scores()[0] === 21) {
          dealer.at(0).flip();
          while (dealer.scores()[0] <= 17) {
            dealer.hit();
          }
          this.logic();
          $('button.hit-button').prop("disabled", true);
          return $('button.stand-button').prop("disabled", true);
        }
      },
      "click .stand-button": function() {
        var dealer, player;
        $('button.hit-button').prop("disabled", true);
        $('button.stand-button').prop("disabled", true);
        player = this.model.get('playerHand');
        dealer = this.model.get('dealerHand');
        player.stand();
        dealer.at(0).flip();
        while (dealer.scores()[0] <= 17) {
          dealer.hit();
        }
        return this.logic();
      },
      "click .reset": function() {
        return this.reset();
      }
    };

    AppView.prototype.logic = function() {
      var dealer, player;
      player = this.model.get('playerHand');
      dealer = this.model.get('dealerHand');
      if (player.scores()[0] <= 21) {
        if (dealer.scores()[0] > 21) {
          this.win();
        } else if (player.scores()[0] > dealer.scores()[0]) {
          this.win();
        } else if (player.scores()[0] < dealer.scores()[0]) {
          this.lose();
        } else if (player.scores()[0] === dealer.scores()[0]) {
          this.push();
        } else if (dealer.scores()[0] === 21) {
          this.lose();
        }
      } else {
        this.lose();
      }
      return void 0;
    };

    AppView.prototype.win = function() {
      $('body').append('<h1>You won!</h1>');
      $('.reset').css('display', 'block');
      return console.log('win');
    };

    AppView.prototype.lose = function() {
      $('body').append('<h1>You suffered a humiliating, crushing defeat.</h1>');
      $('.reset').css('display', 'block');
      return console.log('loss');
    };

    AppView.prototype.push = function() {
      $('body').append('<h1>Push!</h1>');
      $('.reset').css('display', 'block');
      return console.log('tie');
    };

    AppView.prototype.reset = function() {
      $('body').empty();
      return new AppView({
        model: new App()
      }).$el.appendTo('body');
    };

    AppView.prototype.initialize = function() {
      return this.render();
    };

    AppView.prototype.render = function() {
      this.$el.children().detach();
      this.$el.html(this.template());
      this.$('.player-hand-container').html(new HandView({
        collection: this.model.get('playerHand')
      }).el);
      return this.$('.dealer-hand-container').html(new HandView({
        collection: this.model.get('dealerHand')
      }).el);
    };

    return AppView;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=AppView.map
